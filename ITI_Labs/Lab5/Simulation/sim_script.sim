.control
    save all
    * Simple CM Main Device
    + @m.xm0.m0[id]
    * Simple CM Mirroring Device
    + @m.xm1.m0[id]

    * Cascode CM Main Device
    + @m.xm2.m0[id]
    * Cascode CM cascode Device 
    + @m.xm5.m0[id]
    * Cascode CM mirroring Device 
    + @m.xm3.m0[id]
    
*?  OP Point
    let x = 0
    set num = {$&x}
    dowhile x < 6
        save @m.xm{$num}.m0[id]
        save @m.xm{$num}.m0[vgs]
        save @m.xm{$num}.m0[vds]
        save @m.xm{$num}.m0[vth]
        save @m.xm{$num}.m0[vdsat]
        save @m.xm{$num}.m0[gm]
        save @m.xm{$num}.m0[gds]
        save @m.xm{$num}.m0[gmbs]

        let x = x + 1
        set num = {$&x}s
    end

*?  OP Analysis
    * op
    * write Lab5.raw
    * print all
    * print all >> op_point.csv

*?  RB Sweep

    * dc RB 10k 40k 0.5k
    * write Lab5.raw
    * set appendwrite

*?  DC Iout vs VOUT
    * dc VOUT 0 1.8 10m
    * write Lab5.raw
    * set appendwrite
    * let IOUT_Expected = 20e-6
    * meas dc I1 FIND @m.xm1.m0[id] AT=0.5
    * meas dc I2 FIND @m.xm1.m0[id] AT=1.5
    * let I_ERROR = abs((I1 - I2) * 100 / IOUT_Expected)
    * print I_ERROR

*?  Iout Error and ROUT
    * dc VOUT 150m 1.8 10m
    * write Lab5.raw
    * set appendwrite

    * let IB = 20e-6
    * let Iout1_Error = abs((IB - @m.xm1.m0[id]) * 100 / IB)
    * let Iout2_Error = abs((IB - @m.xm5.m0[id]) * 100 / IB)
    * plot Iout1_Error Iout2_Error

    * * let ROUT1 = 1/@m.xm1.m0[gds]
    * * let ROUT2 = (@m.xm5.m0[gm] + @m.xm5.m0[gmbs]) / (@m.xm5.m0[gds] * @m.xm3.m0[gds])
    * let ROUT1 = abs(1 / deriv(@m.xm1.m0[id]))
    * let ROUT2 = abs(1 / deriv(@m.xm5.m0[id]))
    * plot ylog ROUT1 ROUT2
    * meas dc ROUT1_VDD_2 FIND ROUT1 AT = 0.9 
    * meas dc ROUT2_VDD_2 FIND ROUT2 AT = 0.9 

*?  ROUT from AC Analysis
    * ac dec 10 1 10G
    * write Lab5.raw
    * set appendwrite

*?  Mismatch
    * let IB = 20u
    * dc VGMIS0 0 0.942m 1u
    * meas dc I_ERROR_1_at0 FIND @m.xm1.m0[id] AT = 0;
    * meas dc I_ERROR_1_at924 FIND @m.xm1.m0[id] AT = 0.942m;
    * let I_PERCENT_CM = (I_ERROR_1_at924 - I_ERROR_1_at0) * 100 / I_ERROR_1_at0
    
    * print I_PERCENT_CM

    * dc VGMIS1 0 0.942m 1u
    * meas dc I_ERROR_2_at0 FIND @m.xm5.m0[id] AT = 0;
    * meas dc I_ERROR_2_at924 FIND @m.xm5.m0[id] AT = 0.942m;
    * let I_PERCENT_1_Cascode = (I_ERROR_2_at924 - I_ERROR_2_at0) * 100 / I_ERROR_2_at0 

    * print I_PERCENT_1_Cascode


    * dc VGMIS2 0 0.942m 1u
    * meas dc I_ERROR_22_at0 FIND @m.xm5.m0[id] AT = 0;
    * meas dc I_ERROR_22_at924 FIND @m.xm5.m0[id] AT = 0.942m;
    * let I_PERCENT_2 = (I_ERROR_22_at924 - I_ERROR_22_at0) * 100 / I_ERROR_22_at0 

    * print I_PERCENT_2

*?  Monte Carlo

    let mc_runs = 1000
    let run = 1

    dowhile run <= mc_runs
        reset
        op
        print @m.xm5.m0[id] >> Cascode_MC.csv
        print @m.xm1.m0[id] >> Simple_MC.csv
        
        let run = run + 1
    end
.endc
